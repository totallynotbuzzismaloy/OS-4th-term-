<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYQBhAAD/2wBDAAQDAwQDAwQEAwQFBAQFBgoHBgYGBg0JCggKDw0QEA8NDw4R
        ExgUERIXEg4PFRwVFxkZGxsbEBQdHx0aHxgaGxr/2wBDAQQFBQYFBgwHBwwaEQ8RGhoaGhoaGhoaGhoa
        GhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhr/wAARCAJ5BKMDASIAAhEBAxEB/8QA
        HQABAAIDAQEBAQAAAAAAAAAAAAYHAgQFAQMICf/EAD8QAQABAwMBBAcGBQIEBwAAAAABAgMRBAUhMQYS
        QVEHImFxgZHwExQVMqGxI0LB0eEW8RckJTQzQ1NUYmOS/8QAHAEBAAIDAQEBAAAAAAAAAAAAAAQGAwUH
        CAIB/8QAPBEBAAIBAgMCCgcHBQEAAAAAAAECAwQRBRIhBjETQVFhcYGRobHRByJSktLh8BQVFjJiosFC
        RFRygvH/2gAMAwEAAhEDEQA/AP5/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAA29FoNTuF6LWis13rk9KaYy/JmKxvLJjx3y3imOJmZ7ojrPshqCY6P0c71qsTetUaWmf/UqjPyiZ
        l0I9FO4f++0vyq/sg24hpKTtOSFqwdj+0Oopz00l9vPER7pmJ9yvhNdZ6NN400ZsfZar2W6sfvhHdw2L
        cNqqiNw0tyxE9JqxMT8YZsWqwZulLxLW63gPFuGxM6rT3pEeOYnb2xvHvcwBJaMAAGdNM1TimJmZ8Id/
        RdjN618U1WdDXFurmK65ppj9ZY75ceKN72iPSm6TQavXX5NNitef6YmfhCOif2fRZudVMVV6rTWqvKcz
        j5Q8ueivcqac29Xpbk+XrR+8IX7y0e+3hI/XqWX+Cu0c15v2S3u/FugIkeu7Fb1t9Ndd3RVVWqeZqoqi
        qP0lH6qZomYqiYmPBNx5ceWN6WifQrer0Gr0FuTVYrUn+qJj4sAGRBAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAdvs5s1/d9fTRZsVXqKJibnlEe18ZL1x1m1u6ErSaXLrc9MGGN7WnaNu
        vwdTs92I1+826dTVRFjTzzTVc472PKOvh1WFt3Z7W7Vbi3oLti3GIzmnPPvxl0LWr19q1RRTt8d2nFNM
        d7HEcZ+vf7k7huWc/h/Hd49b+by93y/VSdTrNRqbTvtt5N4enuC9m+D8FxVmkZJybdbbWifVtHSPy3Z/
        Y7riIjUWf/znx931+3yq029VVZjVaeOOsUz+2Gc67cYj/sYicZ6zPjj9uXs67cesaHPTjvf1nCB9ePFX
        3LZP7Nbvtl/v+R933aaP+7txX4/w4nwjOPjl8dRt246m1Nu/fsXKZnHdmnMYnxzh9J1+596Yp2/xiJzV
        0ny9vhz72Ua7cZjjb5zjp3ojn5v2PCRO8cvufNo0mWJracsx/wC/khW6+jW/e713SXbX2k893mOfigO5
        bTrNp1E2NfYqtVx4zHE+6ekrzq124RmfuUeyMzMx7/r9nI33RarftH931G3UzXGZivH5fdMt1pOJZ6Wi
        uaYmvpjeHM+0PYrheqxWy8Pi9Mvfty2mtvN3dJnxT3eVSaTbH2M3LfIi5atfY6fP/iXOIn3efwdTauw+
        4W9bNeq0VVy1bqiYpqmIir58LHt6vX2aLVunQRFMYp46RHuieE/W8S5I5cExM+XeOip9mexMam05uLVv
        Ssd1YrO8+mdukejrPmcLZ+xN3aZmq1csfaTx3u7MzHhnn69zuzpd3/k1dmmI/wDjx1jGIx9foyp124TX
        idFEU+/34/p9TmFOt3HMd7Q4iqqYj1uYjwmeVayZc+W3NeYmfU7bpNDwzQ4ow6auSlfNF4+EEWN2xEzq
        bUzGZx3cZ8omcf2Pu26xM41dqrnjvU9PfiPlB9+3GasfcY56R3uI46zP11hjVuG4xPG38TM93nn488MW
        1/JX3JvNpo/1Zf7/AJFWn3fn/mbFUZ6TT1jynj6zPKO732GvbtNV37SxTf8ACYpmmJ+EdEkp124zPraD
        HGcd72+fu83s67cPDQ85xjvZ88+X17+MuPLnw25qTET6kDW6DhfEsM4tVGS9Z8U88+zp0Ufu+y6zZNTN
        jX2ptz1pnwqj2S5a5u1Gi1u+7ZNurb8V25maZzzTOMZx8+inbtuqzXVRXE01UziYlctDqp1OPe23NHfs
        819qeA14HrOXDzTit1rNomJ88dYjfbyvmA2KnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAC1ewOu0+27RX9pp7k113fWuUUZ48Mz0jE+3xVUvHsjuGgs9n9JTTcotVRRmvPGZjrP7NLxe22ni
        vLM7y6h9HGHn4vfJGSKTWk7bxE98xHTeY/8Ajp/j+nxOLd2Yp6z3fH2ef17Cd+09MVTVbvxTT4/ZzHw5
        bH4lou/P8ejOcTP+T8S0NE4+3tUzMxxPEznop3LX7E/r1PR3hcv/ACqeyPxIr2i9INva5qsaGx9pqMRP
        erzinMeXGUA1PbXe9Tdm5VrrlvPhaqmmPlEsO2Gqo1m/6q7ZjFvPdjjwhH110Wh0+PFW3J1mPH1eYu0v
        ari+s1+XFGomKUtMRFZmsdJ236bTPrlLNB2/3rQ1etfjUUz1pvZq/XOU32j0i6TcO7b1Onrs6ieJiJzE
        z7PJTj627lVu5TXbmYqpnMPrUcN02eP5dp83Rg4T2343wu8R4ab08lvreyZ6x7V+2+0NivH8K9zPhRmf
        08eY49vsZRv2n9XNq9HezjNPPh4fHo5XZHf6dXs1mNxqotXrcd3njvU8YmfKXdr3LQ0R62otRETHWeme
        VNy4oxZJpNJ6ef8AJ6X0OuvrdJj1NdTWItET1rETG/in63qa0b9ZmqKfsb8RM8zNPTy/o8nf9PFWJtXv
        L8vOfL68pbc7jooxE37dMzOKYnj6/wBnk7losd6b9vEZ593+zFtX7E+/5JnhMsf7qnsr+Jo3u1Gj09qu
        5ft37dNPnTjMezlDd39KFyc0bRp6KMf+bc9bPujj+rR9Iu9XtVradLa40lFPFUfzz4/qgKz6DhmC2OMu
        Su+/i3cM7V9ueKYNXk0Ojy7Vr0m0ViJmfHt37R5Jjv70hvdst7v3O/Vr7tPPSiqaYj4RLpbX6RN10FyI
        1VdOrs59aLmZn4TlDBubaTT3ryzSNvQ5rg7R8Z0+bw2PVX5v+0z7YmZj3L323tfpdy08XrVi9jHrRERP
        d+P+3Ruf6gsT3cWr3PX1Py8+P+ES9Gu5WLG23rF+abdUVZiqfGPL69qbRumjxmL9GJ5jzlSdVhphz2pW
        k7R5/wAnqLgPE9TxPhmHVZNTWLWjrHLHSfvR+p6NeN909WMU3Mzjju89Z/sp/tnct3t+v37FubVFyIqi
        JjHh1+K6I3TRVTERqLc58uVX+krVaPU6/Tzo5pqrpon7Sqnx6Y/RP4RPLqdopMbwqX0h45z8E576ituS
        0TEREbz4um0z5d58SBgLk81AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4fR/b0Gs
        2OmmumirUUXJiqJq58MTH69Pb5qeSnsXqrNvdren1V6qzZver3oq7uJ88+Hk1vEcM5tPO07bdei7di+J
        U4bxik3pFov9XrtEddtp3nfbr8Vyfh2itzmbNunnPXDH8M0E1TP3e1n8uMdPZhr/AIBpav57tVMzmMVc
        8xzz1nLL8DsTNWbl6c8fmzx8Y5Ubev25/XreqPBZJ79NT2x+FDu23Yq3fo+/7REU10x/EtZ4qiPGFY3d
        Pcs1927RNM+Ur9q2DTVVTP2l7FVOJjv9Z8+nV8q+yu31xEVU1e3GM/DjjzbzScWjBTkvPN8XLeP/AEfX
        4tqp1OlrGKZ7433iZ8sRtG2/j8SjtHt2p1lyKNNamuqekZiP3WT2c9Hmn01FGp3yqLl2YzTa6RT7/OUp
        p7M6KiMUxVTj8uJxj2+3/DOOz9iIn+NqO9P80XOY9kPnVcWnPXlpblj0dWTgf0f04Xl8NqscZrR3RNoi
        serbrPk36eZsW9q2+zRijT26aYjHuZ1bdo7kTE2Lcx48e/P7y1Y2DTxV3vtLsz3u9zVH9I+svjrtr0Ok
        sV6jVaq7atUU81VXJ9vz69PFpo2tbaLzv6/m6XatsOObW01IrH9VYjb7uzoTt+invxNi1ifzcPJ2zQzM
        x9hbzPXHzQnZN92veNdd0l6uuzFXq25mqYiuI6R7Pj5JZOwWJirN69Ocd71+uP7s2XDbT25clpifRPzQ
        OH8QwcXxTm0mGl6xMx3x3/d6f57zX9m9r3GzVb1OmpxMzPepnExOecSrHtD2D1W13Krmgn73p+uIx3qY
        9vKzZ7OaequmZvX+7Tie7FfGY9nl7Payns9paqaaa67tURPexVXnM+3P1180jS662lnpeZjyTH5tNx3s
        vh47jmMmlrS8d1q2iJ9e1eselQFdqu3V3a6ZiY6w6W1bHq941FFnS28xM4mrMYiPOVzVdk9vmqKpprme
        c/l5z8GdHZjQ0R6v2nXwqx458Ihtr8bxzX6sdXPNP9F2qrmic2SJpv3RO0zHp2n4PlsvZbb9p0Nuz3Kb
        1yPWqrqnrV5x7PJ0fwzQY7s2LWPKen1w16ez+mpj1bl6PDivp7vL/EH+n9N3oqi5fjzxcnzV2+Xwlptb
        JO8/ryuy6fRTpcNcOLSUitYiNt47vu9fW2/uGjxmbFqYjziOP7Kf9INemnf67ei7vdoopiru9M45WPvu
        j0e1bdqdXcvXLfdt4p/idZ5xER4/UqR1F2b16u5MzPeqmW+4Nh3vOXmmYjo5R9JPEoxabHw+cVa2tPNM
        xMTMRHSO6I23/wAPgAtTgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9ziXgCd9l+
        12qpqt6LW66q3b/LTVVjFMe+VjU6LW3KKLlvcftIqpie9T0n3Y4x058cy/PzubZ2o3XaMRo9ZciiOlFc
        96n5Tw0Ws4ZOWefDtE+SYdW7Odt40OONPxKL3rHdat53iPJtM7THr3XNGg3GJn/qHE5xmnpGP7lWg3Gq
        OdwxVmOYpx5+H1lXNj0n7lRTEX7dq5V592I/Zt/8U7+M/dac+/LTTw3XVn+WPc6Rj7adl8leubJHmnn+
        ae1aHcauKtdEcxVxTjx5j3TB9w3Dw13hjp0/v4fL2q7v+lDX1U4sWbdufbES424dut73CmbdzVzZonws
        x3J+ccslOF6y383LHs+SLqu3nZzDWZxTlvPmmY9826exPO0O/wB3Yqaqatxou3v5bdMRMxPHE+XSfmrL
        dt+1283P+c1FdyiJ9WiZzFPuc67dqvVzXdqmuqes1TmXyWLS6LHpo377eXZxzj3ajWcavNYmaYvs80z7
        Znv+DKJmmYmmcT7Eu2TtprtJTTp9Vqrk2Y4pnOZpQ8SsuHHnry3jdoeH8T1fC8vhdNeaz49pmInzT1Xt
        t/3zcbEX9JulFyMer3Zzjw5jnnrPVu06DcYjFWuiY68UzzPl7I/t7VFaLc9ZttyK9Fqbtif/AK65p/ZJ
        tN6Sd5sxFN2u1eiOM1W4z81bz8J1ETvimJjzxES7Xwz6QOE3xxGupkpbxzFptWffEx71oTodw7vdp12e
        I9aacTx/jH6vKdBr+e9r+M/l7uc8efggNHpS1Wf4mmon3cPK/Snqv5NPRHlnlC/duu7uWPcsn8Z9ltt/
        DX/v+afzt2vmI/6jXTMRjiMx4z49fBzt31N/ZdLVe1e6U01d2cUz1q48IzE9fl8UA1PpJ3m9ExZuW7UT
        xxbjPzRjWbhqtwud/W6i7fr8665nCdp+E55tvmmIjzRHyVfi3b/hdMU14dTJa8902taIjz7c0zPub297
        9q96vZ1N+uu3TOaKZniPg4oLNSlcdYrWNocO1WqzazNbNntNrT3zM7/EAfaMAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/9k=
</value>
  </data>
</root>